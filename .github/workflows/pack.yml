on:
  push:
    branches:
    - master
    - development
    - rc-*
    tags: ['*']
  pull_request:
    branches:
      - master
      - development
      - rc-*

name: Pack

jobs:
  build-unity:
    name: Build for ${{ matrix.targetPlatform }} on version ${{ matrix.unityVersion }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        projectPath:
          - nekoyume
        unityVersion:
          - 2019.1.0f2
        targetPlatform:
          - Windows
          - MacOS
    steps:
      - uses: actions/checkout@v2
        with:
          lfs: true
          submodules: true
      - uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '3.1.201'
      - name: Set up Python # FIXME: 나중에 내장 파이썬 버전이 3.7 이상으로 올라가면 삭제할 것
        uses: actions/setup-python@v2
        with:
          python-version: 3.8.6
      - uses: actions/cache@v1.1.0
        with:
          path: ${{ matrix.projectPath }}/Library
          key: Library-${{ matrix.projectPath }}-${{ matrix.targetPlatform }}
          restore-keys: |
            Library-${{ matrix.projectPath }}-
            Library-
      - uses: docker://gableroux/unity3d:2019.1.0f2 # FIXME: 이미지 pull 받아오는 속도 개선 필요
        env:
          ULF: ${{ secrets.ULF }}
          APV_SIGNING_PRIVATE_KEY: ${{ secrets.APV_SIGNING_PRIVATE_KEY }}
        with:
          entrypoint: scripts/build-production.sh
          args: ${{ matrix.targetPlatform }}
      - name: Pack
        run: |
          set -evx
          mkdir -p $HOME/.local/bin
          npm config set prefix $HOME/.local/bin
          export PATH="$HOME/.local/bin:$PATH"
          npm install --global strip-json-comments-cli
          dotnet tool install \
            --global \
            Libplanet.Tools
            
          targetPlatform=${{ matrix.targetPlatform }}

          # MacOS일 경우 맨 앞 문자를 소문자로 변경
          if [ "$targetPlatform" == "MacOS" ]; then
            targetPlatform=macOS
          fi
          
          # macOS 내장 date는 ISO 8601 서식 옵션이 따로 없음
          timestamp="$(date -u +"%Y-%m-%dT%H:%M:%SZ")"
          pip3 install wheel
          
          .github/bin/pack.sh \
          /tmp/package \
          "${targetPlatform}" \
          nekoyume/Build/"${targetPlatform}"/ \
          "${{ secrets.APV_SIGNING_PRIVATE_KEY }}" \
          "$timestamp"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
      - uses: chrnorm/deployment-action@releases/v1
        id: build_artifact
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          description: 'Build artifact'
          environment: build-artifact
      - run: mv /tmp/package ./package  # s3-upload-action이 상대 경로만 지원
        shell: bash
      - uses: shallwefootball/s3-upload-action@master
        with:
          source_dir: package
          destination_dir: ${{ github.sha }}
          aws_bucket: 9c-artifacts
          aws_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - if: success()
        uses: chrnorm/deployment-status@releases/v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          target_url: ${{ steps.S3.outputs.object_locations[0] }}
          state: 'success'
          deployment_id: ${{ steps.build_artifact.outputs.deployment_id }}
